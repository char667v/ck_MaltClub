---
const { text, link, size = "medium", variant = "primary" } = Astro.props;

const sizeClasses = {
  small: "px-md py-md text-h5-mobile md:text-h5-tablet lg:text-h5-desktop",
  medium:"px-lg py-md text-h4-mobile md:text-h4-tablet lg:text-h4-desktop",
  large: "px-xl py-xl text-h3-mobile md:text-h3-tablet lg:text-h3-desktop",
};

const variantClasses = {
  

  primary:
    "bg-primary-500 text-accent-500 font-title border-primary-500 hover:bg-primary-400 hover:text-white",
  secondary:
    "text-primary-500 border-primary-500 font-title hover:bg-primary-500 hover:text-accent-500",
    tertiary:
     "bg-neutral-500 border text-primary-500 font-title font-semibold border-primary-500 hover:bg-primary-400 hover:text-accent-500 transition"
};

const baseClasses =
  "inline-block magnetic-btn border transition-transform ease-out duration-100 flex justify-center items-center";
---

<a href={link}><button class={`${baseClasses} ${sizeClasses[size]} ${variantClasses[variant]}`}>
  {text}
</button>
</a>

<style>@keyframes subtlePulse {
  0% {
    transform: scale(1);
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.1), 0 0 15px rgba(0, 0, 0, 0.05);
  }
  50% {
    transform: scale(1.03);
    box-shadow: 0 0 8px rgba(0, 0, 0, 0.15), 0 0 20px rgba(0, 0, 0, 0.1);
  }
  100% {
    transform: scale(1);
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.1), 0 0 15px rgba(0, 0, 0, 0.05);
  }
}

.animate-subtlePulse {
  animation: subtlePulse 3s ease-in-out infinite;
}
</style>

<script>
 // Select all buttons with the class "magnetic-btn"
const buttons = document.querySelectorAll('.magnetic-btn');

// Function to calculate distance between two points
function getDistance(x1: number, y1: number, x2: number, y2: number): number {
  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
}

// Mousemove event to track the mouse position
document.addEventListener('mousemove', (e: MouseEvent) => {
  const mouseX = e.clientX;
  const mouseY = e.clientY;

  // Loop through all buttons and apply the effect
  buttons.forEach((button) => {
    const buttonRect = button.getBoundingClientRect();

    // Calculate the distance between the button and the mouse
    const distance = getDistance(
      mouseX,
      mouseY,
      buttonRect.x + buttonRect.width / 2,
      buttonRect.y + buttonRect.height / 2
    );

    // If the distance is smaller than a certain threshold, move and stretch the button
    if (distance < 1000) {
      const angle = Math.atan2(
        mouseY - (buttonRect.y + buttonRect.height / 2),
        mouseX - (buttonRect.x + buttonRect.width / 2)
      );
      const distanceFactor = (1000 - distance) / 1000;

      // Calculate the stretch factor based on proximity to the mouse
      const scaleX = 1 + distanceFactor * 0.4; // Stretch factor in X direction
      const scaleY = 1 + distanceFactor * 0.4; // Stretch factor in Y direction
      const moveX = Math.cos(angle) * distanceFactor * 50;
      const moveY = Math.sin(angle) * distanceFactor * 50;

      // Cast the button as an HTMLElement to use the 'style' property
      (button as HTMLElement).style.transform = `translate(${moveX}px, ${moveY}px) scale(${scaleX}, ${scaleY})`;
    } else {
      // Reset the button's transform if the mouse is not close enough
      (button as HTMLElement).style.transform = 'translate(0, 0) scale(1, 1)';
    }
  });
});
</script>